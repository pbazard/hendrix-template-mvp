name: üöÄ Release

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: üè∑Ô∏è Create Release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci

      - name: üß™ Run tests
        run: npm test

      - name: üèóÔ∏è Build project
        run: npm run build

      - name: üè∑Ô∏è Create Release
        id: release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-preview:
    name: üöÄ Deploy Preview
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build for preview
        run: npm run build
        env:
          NODE_ENV: production

      - name: üöÄ Deploy to preview
        id: deploy
        run: |
          echo "url=https://preview-${{ needs.release.outputs.version }}.example.com" >> $GITHUB_OUTPUT
          # Ici vous ajouteriez votre logique de d√©ploiement
          # Par exemple : deploiement vers Vercel, Netlify, AWS, etc.

  notify-success:
    name: üì¢ Notify Success
    runs-on: ubuntu-latest
    needs: [release, deploy-preview]
    if: always() && needs.release.outputs.released == 'true'
    
    steps:
      - name: üéâ Success Notification
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: |
            üéâ Nouvelle version d√©ploy√©e avec succ√®s !
            
            **Version**: ${{ needs.release.outputs.version }}
            **Tag**: ${{ needs.release.outputs.tag }}
            **Preview**: ${{ needs.deploy-preview.result == 'success' && 'D√©ploy√© avec succ√®s' || 'D√©ploiement en cours' }}
            
            Voir les [notes de version](https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag }})
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ‚ùå Failure Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: |
            ‚ùå √âchec du d√©ploiement de la version ${{ needs.release.outputs.version }}
            
            V√©rifiez les logs : ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
