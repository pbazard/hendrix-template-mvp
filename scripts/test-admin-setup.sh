#!/bin/bash

# Script de test pour l'interface d'administration Hendrix

set -e

echo "üß™ Test de l'interface d'administration Hendrix"
echo "=============================================="
echo ""

# V√©rification de l'environnement
echo "üìã V√©rification de l'environnement..."

# V√©rifier Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo "‚úÖ Node.js d√©tect√©: $NODE_VERSION"
else
    echo "‚ùå Node.js non trouv√©"
    exit 1
fi

# V√©rifier npm
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    echo "‚úÖ npm d√©tect√©: $NPM_VERSION"
else
    echo "‚ùå npm non trouv√©"
    exit 1
fi

# V√©rifier le fichier package.json
if [ -f "package.json" ]; then
    echo "‚úÖ package.json trouv√©"
else
    echo "‚ùå package.json non trouv√© - √™tes-vous dans le bon r√©pertoire ?"
    exit 1
fi

echo ""

# V√©rification des fichiers de l'administration
echo "üìÅ V√©rification des fichiers de l'administration..."

ADMIN_FILES=(
    "src/admin/types/index.ts"
    "src/admin/config/models.ts"
    "src/admin/services/auth.ts"
    "src/admin/services/data.ts"
    "src/admin/context/AdminContext.tsx"
    "src/admin/components/AdminLayout.tsx"
    "src/admin/components/AdminDashboard.tsx"
    "src/app/admin/page.tsx"
    "src/app/api/admin/users/route.ts"
    "src/app/api/admin/groups/route.ts"
)

MISSING_FILES=()

for file in "${ADMIN_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file (manquant)"
        MISSING_FILES+=("$file")
    fi
done

if [ ${#MISSING_FILES[@]} -gt 0 ]; then
    echo ""
    echo "‚ö†Ô∏è  Fichiers manquants d√©tect√©s. L'installation pourrait √™tre incompl√®te."
    echo ""
fi

# V√©rification de la configuration Amplify
echo ""
echo "‚öôÔ∏è  V√©rification de la configuration Amplify..."

if [ -f "amplify_outputs.json" ]; then
    echo "‚úÖ amplify_outputs.json trouv√©"
    
    # V√©rifier la pr√©sence des cl√©s importantes
    if grep -q "user_pool_id" amplify_outputs.json; then
        USER_POOL_ID=$(grep -o '"user_pool_id": "[^"]*"' amplify_outputs.json | cut -d'"' -f4)
        echo "‚úÖ User Pool ID: $USER_POOL_ID"
    else
        echo "‚ùå User Pool ID non trouv√© dans amplify_outputs.json"
    fi
    
    if grep -q "aws_region" amplify_outputs.json; then
        AWS_REGION=$(grep -o '"aws_region": "[^"]*"' amplify_outputs.json | head -1 | cut -d'"' -f4)
        echo "‚úÖ AWS Region: $AWS_REGION"
    else
        echo "‚ùå AWS Region non trouv√© dans amplify_outputs.json"
    fi
else
    echo "‚ùå amplify_outputs.json non trouv√©"
fi

echo ""

# Test des d√©pendances
echo "üì¶ V√©rification des d√©pendances..."

REQUIRED_DEPS=(
    "next"
    "react"
    "aws-amplify"
    "tailwindcss"
    "sonner"
)

OPTIONAL_DEPS=(
    "@aws-sdk/client-cognito-identity-provider"
    "@radix-ui/react-dropdown-menu"
)

# V√©rifier les d√©pendances requises
for dep in "${REQUIRED_DEPS[@]}"; do
    if npm list "$dep" &> /dev/null; then
        echo "‚úÖ $dep (install√©)"
    else
        echo "‚ùå $dep (manquant)"
    fi
done

# V√©rifier les d√©pendances optionnelles
echo ""
echo "üì¶ D√©pendances optionnelles (pour fonctionnalit√©s avanc√©es):"
for dep in "${OPTIONAL_DEPS[@]}"; do
    if npm list "$dep" &> /dev/null; then
        echo "‚úÖ $dep (install√©)"
    else
        echo "‚ö†Ô∏è  $dep (recommand√© pour la production)"
    fi
done

echo ""

# Test de compilation
echo "üî® Test de compilation TypeScript..."

if npx tsc --noEmit --skipLibCheck; then
    echo "‚úÖ Compilation TypeScript r√©ussie"
else
    echo "‚ùå Erreurs de compilation TypeScript d√©tect√©es"
fi

echo ""

# Instructions finales
echo "üöÄ Instructions pour tester l'interface d'administration:"
echo ""
echo "1. Installer les d√©pendances manquantes (si n√©cessaire):"
echo "   npm install @aws-sdk/client-cognito-identity-provider @radix-ui/react-dropdown-menu"
echo ""
echo "2. Configurer les groupes Cognito:"
echo "   chmod +x scripts/setup-cognito-groups.sh"
echo "   ./scripts/setup-cognito-groups.sh"
echo ""
echo "3. D√©marrer l'application de d√©veloppement:"
echo "   npm run dev"
echo ""
echo "4. Acc√©der aux interfaces de test:"
echo "   - Page de test: http://localhost:3000/admin/test"
echo "   - Interface admin: http://localhost:3000/admin"
echo ""
echo "5. Cr√©er un utilisateur test et l'ajouter au groupe 'Administrators'"
echo ""

# V√©rification AWS CLI (optionnel)
if command -v aws &> /dev/null; then
    echo "‚úÖ AWS CLI d√©tect√© - vous pouvez utiliser les scripts de configuration"
else
    echo "‚ÑπÔ∏è  AWS CLI non d√©tect√© - configuration manuelle via la console AWS n√©cessaire"
fi

echo ""
echo "‚úÖ Test termin√©!"
echo ""

# Proposer de lancer les tests automatiques
read -p "Voulez-vous lancer l'application de test maintenant ? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üöÄ Lancement de l'application..."
    npm run dev
fi
